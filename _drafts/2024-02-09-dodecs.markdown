---
layout: post
title:  "Like Playing 4D Chess"
date:   2024-02-09 07:38:00 +0100
categories: "tilemesh"
---

<p align="center">
  <img src="/Pictures/Post_2/N_from_P.svg" height=400px alt="Ni from Phi"/>
</p>

<ul>
<li>Back to the <a href="/topics/tiles">Tiles</a> topic index.</li>
<li><a href="https://github.com/Duncuiad/MovingFrames/blob/main/OpenGLPG/Core/Dodec.h">Dodec</a> on GitHub <svg class="svg-icon"><use xlink:href="{{ '/assets/minima-social-icons.svg#github' | relative_url }}"></use></svg> </li>
</ul>

In the introductory post to the *Tiles* section, we saw how to generate a square-triangle tiling of the plane. At the end of that post, I called your attention to a handful of questions. What will make or break the implementability and usability of this tiling in real-time applications will be, in no small part, how satisfying the answers to those questions will turn out to be.

I'll recap the first two of them here, so that it will be easier to keep them in mind as the post progresses.
- When an edge gets split in two, we use the edge's vertices' positions to calculate the middle vertex's position on the plane. Every time this happens, the numerical errors get worse. 
- One defining property of regular grids, like a checkerboard pattern, is that each vertex is identified by its coordinates on the grid. For example, we can take the point $(78, -172)$ and immediately know two things: that it is indeed a vertex in the grid, and that its neighbours are exactly the vertices $(77, -172)$ to the west, $(79, -172)$ to the east, $(78, -173)$ to the south and $(78, -171)$ to the north. This doesn't work on a generic polygonal mesh, like ours definitely is. Or is it?

In this post, we'll build a framework that will allow us to solve both issues at once. It's going to be a little more mathematical than the previous post, but it is by no means addressed to an audience with a mathematical background beyond high-school maths. I'll only ask you to dive into this armed with your best geometric intuition and I will try my best to make the best use of it.

<h2>1. Coordinates</h2>

Let's begin in the world where things go smoothly: regular grids. On a nice and square grid, we're perfectly used to get our bearings by plopping down an arbitrary point, which we usually call the *origin*. To know where we are, we then simply determine how many steps east-west and how many steps north-south we happen to be with respect to said special point. Which means that we will be given some information of the kind "*17 steps west and 92 north!*", which we promptly translate to the point $(-17,92)$ as soon as we decide that our frame of reference will be positively oriented towards the north and the east. We call these numbers *coordinates*.

On a grid though, these are not just *any* coordinates. They are *integer* coordinates! And that's very important: no fractional move allowed in chess, no fractional block placing in Minecraft or Terraria[^1]. In all the sick variations and sad excuses for a grid that we'll see later, this point will never cease to be the most critical. We need those numbers to be *integers*.

Now watch me as I put a *complex number* in a post which I said would only contain some simple high-school maths:

<p align="center">
  <img src="/Pictures/Post_2/Square_Grid.svg" height=400px alt="Square Grid"/>
  <p class="post-meta" align="center">Coordinates on a square grid</p>
</p>

Indulge me as I ask you to notice how the weird part in this picture is not the $i$, but the $1$. Here $i$ is just saying "*step to the north*". We might as well have called the point '$3e+2n$', for "*three steps to the* $e$*ast and two to the* $n$*orth*". $e$ and $n$ could be any direction, by the way: in a different context, they could have been any two vectors[^vector] we found useful for orienting ourselves. For some reason[^2], though, the east is always implicit.

So far so good: we have two red basic steps, $1$ and $i$, and some numbers that tell us how many of the red steps to take: $3$ and $2$  respectively. That's it for square grids, they have nothing more to say. There are two different directions, so two numbers. Let's move on to triangular grids. They have three different directions ($0^\circ$, $120^\circ$, $240^\circ$) so three numbers to describe a point. Right? *Right*? Nope! Take a look at this:

<p align="center">
  <img src="/Pictures/Post_2/Triangular_Grid.gif" alt="Triangular Grid"/>
  <p class="post-meta" align="center">Coordinates on a triangular grid</p>
</p>

First of all, let's clarify a couple of things. Yes, we have three different directions: their names are $1$, $\zeta$ and $\zeta^2$. If you're not familiar with multiplying complex numbers, don't worry. You can take them simply as three symbols, each corresponding to a different vector. The picture shows a point, circled in black, and various ways of reaching it by stepping along the three red vectors.

You might say: of course there are multiple ways to reach the same point. For example, in the square grid, taking a step east, then north, then east, then north, then east again is a different way to reach $3+2i$ than taking three steps east followed by two steps north. You'd be right of course, but let me impose stricter rules to this game:

- You can't backtrack
- Choose a fixed order for the step directions, for example $1 \longrightarrow i$ or $1 \longrightarrow \zeta \longrightarrow \zeta^2$. You can't split steps along the same direction across different phases. For example, doing north, then east, then north again is not allowed.

With these rules in place, playing on the square grid becomes very boring. There is but one way to get anywhere. But on the triangular grid, well... take another look at the picture: the rules are holding up. And there are many more paths not shown in the picture that would still satisfy those rules. So what's different? As you probably guessed, the issue is that yes, the directions are three, but they are not *independent*. You can obtain any of the three from the other two[^3]: $\zeta^2$ can be reached by going against $1$ once and then taking one step against $\zeta$. In formulas, $\zeta^2=-1-\zeta$. Of course, there's nothing more fundamental about $\zeta$ and $1$ than $\zeta^2$: they can themselves be obtained as $\zeta=-1-\zeta^2$ and even $1=-\zeta-\zeta^2$.

We say that each of the collections $\left\\{1, \zeta \right\\}$, $\left\\{1, \zeta^2 \right\\} $ and $\left\\{\zeta,\zeta^2\right\\}$ is a *basis*. For a collection of vectors to be a basis, it needs to satisfy two properties at the same time. As we have seen, the vectors need to be independent, which makes it so we're not including *more* vectors *than are necessary*. But to make up a basis, they also need to be *enough*, in that any point of the grid must be reachable by taking an integer number of steps along those vectors. For example, the collection $\left\\{1, 2\zeta \right\\}$ is made of independent vectors but it is not a basis of the triangular grid, because the point $\zeta$ can't be reached[^4].

What the picture is saying, then, is that each basis assigns different coordinates to the same point. Which of the possible bases we use is not important. What we need to keep in mind, rather, is that coordinates only have meaning in relation to one specific basis.



<h2>2. Polynomials</h2>

<h2>3. So How Are the Vertices Implemented?</h2>




___

<h3>Notes and References:</h3>

[^1]: Nope, slabs don't count. They are full blocks with a weirder shape, rather than the elementary component of the world. That title goes to blocks - the full kind.  

[^vector]: I'll sometimes use the term 'vector' improperly in this post for a simple reason: people who didn't study maths at university are used to calling objects with multiple coordinates 'vectors'. There's no doubt that any mathematician who happens to read this page is going to badly cringe every single time they see the word 'vector' used in this context. If you're wondering why, it's because the spaces treated in this post are not vector spaces, but $\mathbb{Z}$-modules. They share similarities with vector spaces, but they are way less straightforward.

[^2]: If you're interested, it has to do with the fact that if you have two complex numbers that define a frame of reference - which means that they are not zero and they point in different directions - you can always divide both by one of the two. This has the effect of rotating and scaling your frame of reference uniformly. But now one of your vectors is just the (complex) number $1$!

[^3]: You might be tempted to say: "But of course they aren't independent, they are three but the plane is bi-dimensional. There just isn't enough room". If that's the case, hold that thought: we'll see in a little bit that even though in some contexts you'd be right, we're working with something different here. The key is to always remember that we need to work with *integer* numbers.

[^4]: Here you can spot one big difference between *actual* vector spaces and these grids, which are objects called free $\mathbb{Z}$-modules. In vector spaces of dimension $n$, as soon as you have $n$ independent vectors, they form a basis: you can reach all the vector space. On the triangular grid however, sometimes two independent vectors are enough and sometimes they are not.